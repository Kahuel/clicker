{"version":3,"sources":["store/actions/combat.ts","store/reducers/util.ts","store/reducers/combat.ts","store/reducers/index.ts","components/Bars/ActionBar.tsx","components/Fighters/elements/Hand.tsx","components/Fighters/elements/HealthBar.tsx","components/Fighters/Player.tsx","components/Fighters/Enemy.tsx","App.tsx","index.tsx"],"names":["hitting","type","weaponSwitch","handSlot","newWeapon","prevWeapon","payload","ugradeWeapon","enemyCreator","lvl","maxHP","Math","ceil","exp","hp","saver","store","localStorage","setItem","JSON","stringify","newItem","name","_","uniqueId","dmg","random","itemDrop","inventory","defaultPlayer","leftWeapon","rightWeapon","reducers","xp","coins","player","enemy","action","newHp","newInventory","newXP","newCoins","sortedInventory","sortBy","e","newLvl","newStore","map","weapon","console","log","weaponToUpgrade","alert","newBalance","ActionBar","dispatch","useDispatch","onClick","actions","combatActions","Hand","props","useSelector","worldLvl","onChange","preventDefault","Number","target","value","selected","index","HealthBar","Player","Enemy","App","className","createStore","getItem","parse","initStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71fcc752.chunk.js","sourcesContent":["import { Weapon } from \"types/types\";\n\nexport const hitting = () => ({\n  type: \"HITTING\",\n});\nexport const weaponSwitch = (\n  handSlot: string,\n  newWeapon: Weapon,\n  prevWeapon: Weapon\n) => ({\n  type: \"WEAPON_SWITCH\",\n  payload: { handSlot, newWeapon, prevWeapon },\n});\n\nexport const ugradeWeapon = (handSlot: string) => ({\n  type: \"UPGRADE_WEAPON\",\n  payload: { handSlot },\n});\n","import { Weapon } from \"types/types\";\nimport _ from \"lodash\";\n\nexport const factorial = (x: number): number =>\n  x <= 1 ? 1 : x * factorial(x - 1);\n\nexport const enemyCreator = (lvl: number) => ({\n  maxHP: 10 * lvl + Math.ceil(Math.exp(lvl)),\n  hp: 10 * lvl + Math.ceil(Math.exp(lvl)),\n});\n\nexport const saver = (store: any) => {\n  localStorage.setItem(\"store\", JSON.stringify(store));\n  return store;\n};\n\nconst newItem = (lvl: number) => ({\n  lvl: 1,\n  name: _.uniqueId(\"Weapon_\"),\n  dmg: Math.ceil(Math.random() * 3) * lvl,\n});\n\nexport const itemDrop = (lvl: number, inventory: Weapon[]) => {\n  const droped = Math.random() < 0.2 ? true : false;\n  if (droped) {\n    return [...inventory, newItem(lvl)];\n  }\n  return inventory;\n};\n","import { Action, Store, Weapon } from \"types/types\";\nimport { enemyCreator, saver, itemDrop } from \"./util\";\nimport _ from \"lodash\";\n\nconst defaultPlayer = {\n  leftWeapon: { lvl: 1, name: \"fist1\", dmg: 1 },\n  rightWeapon: { lvl: 1, name: \"fist2\", dmg: 1 },\n  inventory: [],\n};\n\nexport const combat = (\n  store: Store = {\n    lvl: 1,\n    xp: 0,\n    coins: 0,\n    player: defaultPlayer,\n    enemy: enemyCreator(1),\n  },\n  action: Action\n) => {\n  switch (action.type) {\n    case \"HITTING\": {\n      const { lvl, xp, coins, player, enemy } = store;\n      const dmg = player.leftWeapon.dmg + player.rightWeapon.dmg;\n      const newHp = enemy.hp - dmg;\n      //enemy died?\n      if (newHp < 1) {\n        const newInventory = itemDrop(lvl, player.inventory);\n        const newXP = xp + lvl ** 2;\n        const newCoins = coins + Math.ceil(Math.random() * 3) * lvl;\n        const sortedInventory = _.sortBy(newInventory, [(e) => e.dmg]);\n        //lvlup?\n        if (newXP >= 10 + 2 ** (lvl + 1)) {\n          const newLvl = lvl + 1;\n          const newStore = {\n            ...store,\n            xp: 0,\n            coins: newCoins,\n            lvl: newLvl,\n            player: {\n              ...player,\n              inventory: sortedInventory,\n            },\n            enemy: enemyCreator(lvl),\n          };\n          return saver(newStore);\n        }\n        //enemy got damage\n        const newStore = {\n          ...store,\n          xp: newXP,\n          coins: newCoins,\n          player: {\n            ...player,\n            inventory: sortedInventory,\n          },\n          enemy: enemyCreator(lvl),\n        };\n        return saver(newStore);\n      }\n      const newStore = { ...store, enemy: { ...store.enemy, hp: newHp } };\n      return saver(newStore);\n    }\n    case \"WEAPON_SWITCH\": {\n      const { handSlot, newWeapon, prevWeapon } = action.payload;\n      const newInventory = store.player.inventory.map((weapon: Weapon) =>\n        weapon.name === newWeapon.name ? prevWeapon : weapon\n      );\n      const sortedInventory = _.sortBy(newInventory, [(e) => e.dmg]);\n      return {\n        ...store,\n        player: {\n          ...store.player,\n          [handSlot]: newWeapon,\n          inventory: sortedInventory,\n        },\n      };\n    }\n    case \"UPGRADE_WEAPON\": {\n      console.log(store);\n      const { handSlot } = action.payload;\n      const weaponToUpgrade = store.player[handSlot];\n      if (weaponToUpgrade.lvl > 9) {\n        alert(\"Maximum lvl reached\");\n        return store;\n      }\n      const newBalance = store.coins - store.lvl * weaponToUpgrade.lvl;\n      if (newBalance < 0) {\n        return store;\n      }\n      const newStore = {\n        ...store,\n        coins: newBalance,\n        player: {\n          ...store.player,\n          [handSlot]: {\n            ...weaponToUpgrade,\n            dmg: weaponToUpgrade.dmg + store.lvl,\n            lvl: weaponToUpgrade.lvl + 1,\n          },\n        },\n      };\n      return saver(newStore);\n    }\n    default:\n      return store;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { combat } from \"./combat\";\n\nexport const reducers = combat;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../../store\";\n\nexport const ActionBar = () => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <button\n        onClick={() => {\n          dispatch(actions.combatActions.hitting());\n        }}\n      >\n        Attack\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Store } from \"types/types\";\nimport { combatActions } from \"store/actions\";\nimport _ from \"lodash\";\n\nexport const Hand = (props: any) => {\n  const inventory = useSelector((store: Store) => store.player.inventory);\n  const worldLvl = useSelector((store: Store) => store.lvl);\n  const dispatch = useDispatch();\n  const { handSlot, weapon } = props;\n  return (\n    <div>\n      <select\n        onChange={(e) => {\n          e.preventDefault();\n          dispatch(\n            combatActions.weaponSwitch(\n              handSlot,\n              inventory[Number(e.target.value)],\n              weapon\n            )\n          );\n        }}\n      >\n        <option selected>{`${weapon.name} (${weapon.dmg} dmg)`}</option>\n        {inventory.map((weapon, index) => (\n          <option key={_.uniqueId(\"key\")} value={index}>\n            {`${weapon.name} (${weapon.dmg} dmg)`}\n          </option>\n        ))}\n      </select>\n      <button\n        onClick={() => {\n          dispatch(combatActions.ugradeWeapon(handSlot));\n        }}\n      >\n        {weapon.lvl === 10\n          ? \"Max lvl\"\n          : `Upgrade for ${worldLvl * weapon.lvl} (+${worldLvl} dmg)`}\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const HealthBar = (props: any) => {\n  const { hp, maxHP } = props;\n  return <div>{`${hp}/${maxHP}`}</div>;\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Hand } from \"./elements\";\nimport { Store } from \"types/types\";\n\nexport const Player = () => {\n  const { leftWeapon, rightWeapon } = useSelector(\n    (store: Store) => store.player\n  );\n  const coins = useSelector((store: Store) => store.coins);\n  return (\n    <div>\n      <div>{`Coins: ${coins}`}</div>\n      <Hand handSlot=\"leftWeapon\" weapon={leftWeapon} />\n      <Hand handSlot=\"rightWeapon\" weapon={rightWeapon} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Store } from \"types/types\";\nimport { HealthBar } from \"./elements\";\n\nexport const Enemy = () => {\n  const { hp, maxHP } = useSelector((store: Store) => store.enemy);\n  return (\n    <div>\n      <HealthBar hp={hp} maxHP={maxHP} />\n    </div>\n  );\n};\n","import \"./App.css\";\nimport { Player, Enemy, ActionBar } from \"./components\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Player />\n      <ActionBar />\n      <Enemy />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { App } from \"./App\";\nimport { reducers } from \"./store\";\n\nconst initStore = () => {\n  const store = localStorage.getItem(\"store\");\n  if (store) {\n    return JSON.parse(store);\n  }\n  return undefined;\n};\nconst store = createStore(reducers, initStore());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}